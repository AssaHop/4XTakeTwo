// üìã src/utils/generateMapByProfile.js

import { generateHexMap } from '../world/map.js';
import {
  clusterizeTerrain,
  createSeededRNG,
  applyVerticalIslandGrowth,
  applySurfAndDeepPass
} from './terrainGen.js';
import { generateZonalIslands } from './islandBuilder.js';

// üîÅ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞—Ä—Ç
import { defaultIsland } from './mapProfiles/defaultIsland.js';
import { strait } from './mapProfiles/strait.js';

export const mapProfiles = {
  defaultIsland,
  strait,
  default: defaultIsland // ‚úÖ –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
};

// üé≤ –®–µ–π–ø—ã –¥–ª—è –∑–æ–Ω–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const shapePresets = {
  blob: [
    { q: 0, r: 0 }, { q: 1, r: 0 }, { q: -1, r: 0 },
    { q: 0, r: 1 }, { q: 0, r: -1 },
    { q: 1, r: -1 }, { q: -1, r: 1 }
  ],
  tail: [
    { q: 0, r: 0 },
    { q: 0, r: 1 }, { q: 0, r: 2 },
    { q: 0, r: 3 }, { q: 1, r: 3 }, { q: -1, r: 3 }
  ],
  ridge: [
    { q: -2, r: 0 }, { q: -1, r: 0 }, { q: 0, r: 0 }, { q: 1, r: 0 }, { q: 2, r: 0 }
  ]
};

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø–æ ID –ø—Ä–æ—Ñ–∏–ª—è
 * @param {string} profileId - –∫–ª—é—á –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "defaultIsland")
 * @param {number} size - —Ä–∞–¥–∏—É—Å –∫–∞—Ä—Ç—ã
 * @param {number} seed - —Å–∏–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ Date.now())
 * @returns {Array[]} –ö–∞—Ä—Ç–∞ ‚Äî –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å –≥–µ–∫—Å–∞–º–∏
 */
export function generateMapByProfile(profileId = 'defaultIsland', size = 15, seed = Date.now()) {
  const profile = mapProfiles[profileId];
  if (!profile) throw new Error(`‚ùå Unknown map profile: ${profileId}`);

  const map = generateHexMap(size, 0, 0);
  const rng = createSeededRNG(seed);

  // üèì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç—Ä–æ–≤–æ–≤ –Ω–æ–≤—ã–º —Å–ø–æ—Å–æ–±–æ–º, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ
  if (profile.zonalIslands && Array.isArray(profile.zonalIslands)) {
    generateZonalIslands(map.flat(), profile.zonalIslands, shapePresets, {
      seed,
      growChance: profile.growChance,
      growIterations: profile.growIterations
    });
  }

  // üóì –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
  clusterizeTerrain(map.flat(), profile.clusterIntensity, rng);

  // üß± –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –æ—Å—Ç—Ä–æ–≤–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  applyVerticalIslandGrowth(
    map.flat(),
    profile.verticalGrowthRules || {},
    profile.verticalIterations || 5
  );

  // üåä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–≤–æ–¥–∫–∏ –∏ –≥–ª—É–±–∏–Ω–Ω–æ–π –≤–æ–¥—ã
  applySurfAndDeepPass(map.flat());

  return map;
}
