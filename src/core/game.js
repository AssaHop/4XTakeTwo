import { generateHexMap } from '../world/map.js';
import { renderMap, renderUnits } from '../ui/render.js';
import { addUnit } from '../mechanics/units.js';
import { setupUI } from '../ui/setup.js';
import { setupEventListeners } from '../ui/events.js';
import { state } from '../core/state.js';

// –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
let scale = 1;
let isDragging = false;
let dragStart = { x: 0, y: 0 };
let offset = { x: 0, y: 0 };
let mapOffsetX = 0;
let mapOffsetY = 0;

// üìå –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
function updateMapOffset() {
    const canvas = document.getElementById('game-canvas');
    if (!canvas) {
        console.error("‚ùå Canvas not found!");
        return;
    }

    if (canvas.width === 0 || canvas.height === 0) {
        canvas.width = canvas.clientWidth;
        canvas.height = canvas.clientHeight;
    }

    mapOffsetX = canvas.width / 2;
    mapOffsetY = canvas.height / 2;
    offset.x = mapOffsetX;
    offset.y = mapOffsetY;
    console.log(`updateMapOffset - mapOffsetX: ${mapOffsetX}, mapOffsetY: ${mapOffsetY}`);
}

// üñ•Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
function showMenu() {
    document.getElementById('menu-container').style.display = 'block';
    document.getElementById('game-container').style.display = 'none';
}

// üïπÔ∏è –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function startGame(size) {
    document.getElementById('menu-container').style.display = 'none';
    document.getElementById('game-container').style.display = 'block';
    initGame(size);
}

// üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame(size) {
    updateMapOffset();
    state.map = generateHexMap(size);

    if (!state.map || state.map.length === 0) {
        console.error('‚ùå Map generation failed');
        return;
    }

    renderMap(scale, offset);
    addUnit(0, 0, 0, 'soldier', 'player1');
    addUnit(1, -1, 0, 'archer', 'player2');
    renderUnits(scale, offset);
    setupEventListeners();
    console.log(`initGame - scale: ${scale}, offset.x: ${offset.x}, offset.y: ${offset.y}`);
}

// üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º `canvas`
function setupCanvas() {
    const canvas = document.getElementById('game-canvas');
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    updateMapOffset();
    console.log(`setupCanvas - scale: ${scale}, offset.x: ${offset.x}, offset.y: ${offset.y}`);
}

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    setupCanvas();
    renderMap(scale, offset);
    renderUnits(scale, offset);
    console.log(`window resize - scale: ${scale}, offset.x: ${offset.x}, offset.y: ${offset.y}`);
});



// üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞c—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å —É—á—ë—Ç–æ–º –∫—É—Ä—Å–æ—Ä–∞
function setupZoomControls() {
    const canvas = document.getElementById('game-canvas');

    canvas.addEventListener('wheel', (event) => {
        event.preventDefault();

        // üü¢ –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
        const rect = canvas.getBoundingClientRect();
        const cursorX = event.clientX - rect.left;
        const cursorY = event.clientY - rect.top;

        // üü° –í—ã–±–∏—Ä–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑—É–º–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–ª–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–µ)
        const zoomFactor = event.deltaY < 0 ? 1.1 : 0.9;

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        applyZoom(zoomFactor, cursorX, cursorY);
    });
}

// üìå –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
function applyZoom(zoomFactor, cursorX, cursorY) {
    // üü¢ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞
    const rect = document.getElementById('game-canvas').getBoundingClientRect();
    cursorX = cursorX ?? rect.width / 2; // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –±–µ—Ä—ë–º —Ü–µ–Ω—Ç—Ä
    cursorY = cursorY ?? rect.height / 2;

    // üîµ –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ –¥–æ –∑—É–º–∞
    const worldXBefore = (cursorX - offset.x) / scale;
    const worldYBefore = (cursorY - offset.y) / scale;

    // üü° –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–∞—Å—à—Ç–∞–± –∏ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π
    const prevScale = scale;
    scale *= zoomFactor;

    // üìå –û–±–Ω–æ–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–æ—á–∫–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –Ω–∞ –º–µ—Å—Ç–µ
    offset.x = cursorX - worldXBefore * scale;
    offset.y = cursorY - worldYBefore * scale;

    // üîµ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏—Ä–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ –∑—É–º–∞
    const worldXAfter = (cursorX - offset.x) / scale;
    const worldYAfter = (cursorY - offset.y) / scale;

    // üõ†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üü¢ Cursor - cursorX: ${cursorX}, cursorY: ${cursorY}`);
    console.log(`üîµ World BEFORE - worldX: ${worldXBefore.toFixed(2)}, worldY: ${worldYBefore.toFixed(2)}`);
    console.log(`üîÑ Scaling - Old Scale: ${prevScale.toFixed(2)}, New Scale: ${scale.toFixed(2)}`);
    console.log(`üìå New Offset: (${offset.x.toFixed(2)}, ${offset.y.toFixed(2)})`);
    console.log(`üîµ World AFTER  - worldX: ${worldXAfter.toFixed(2)}, worldY: ${worldYAfter.toFixed(2)}`);

    // üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
    requestAnimationFrame(() => {
        renderMap(scale, offset);
        renderUnits(scale, offset);
    });
}

// üìå –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
function zoomIn(cursorX, cursorY) {
    applyZoom(1.1, cursorX, cursorY);
}

function zoomOut(cursorX, cursorY) {
    applyZoom(0.9, cursorX, cursorY);
}






// üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
function setupDragControls() {
    const canvas = document.getElementById('game-canvas');

    canvas.addEventListener('mousedown', (event) => {
        if (event.button === 2) { // –¢–æ–ª—å–∫–æ –ü–ö–ú
            isDragging = true;

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–º–µ—â–µ–Ω–∏—è
            dragStart.x = event.clientX - mapOffsetX;
            dragStart.y = event.clientY - mapOffsetY;
        }
    });

    canvas.addEventListener('mousemove', (event) => {
        if (isDragging) {
            // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
            offset.x = event.clientX - dragStart.x;
            offset.y = event.clientY - dragStart.y;

            // –¢–µ–ø–µ—Ä—å mapOffsetX/Y —Ç–æ–∂–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            mapOffsetX = offset.x;
            mapOffsetY = offset.y;

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É
            requestAnimationFrame(() => {
                renderMap(scale, offset);
                renderUnits(scale, offset);
            });
        }
    });

    canvas.addEventListener('mouseup', (event) => {
        if (event.button === 2) {
            isDragging = false;
        }
    });

    canvas.addEventListener('mouseleave', () => {
        isDragging = false;
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –ü–ö–ú
    canvas.addEventListener('contextmenu', (event) => {
        event.preventDefault();
    });
}

// üèÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    setupUI();
    window.requestAnimationFrame(() => {
        setupCanvas();
        showMenu();
        setupZoomControls();
        setupDragControls();
        startGame(2);
    });
});

// üìå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.startGame = startGame;
window.zoomIn = zoomIn;
window.zoomOut = zoomOut;

export { state, mapOffsetX, mapOffsetY };
