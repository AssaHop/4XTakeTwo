// üìÇ src/core/unitActingActions.js

import { performAttack } from '../mechanics/units.js';
import { handlePostActingPhase } from './gameStateMachine.js';

const ActingActions = {
  Charge: (unit, target) => {
    if (!target) {
      console.warn(`‚ö†Ô∏è [Charge] No valid target! Skipping Charge action.`);
      return;
    }
    const result = performAttack(unit, target);
    console.log(`‚öîÔ∏è [Charge Action] Attack result: ${result}`);
  },

  Boost: (unit) => {
    console.log(`‚ú® [Boost Action] Healing allies near unit ${unit.type}`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Boost-—ç—Ñ—Ñ–µ–∫—Ç–∞
  },

  Percy: (unit) => {
    console.log(`üîÅ [Percy Bonus] Checking kill streaks`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–Ω—É—Å–∞ –Ω–∞ kill
  },

  Flee: (unit) => {
    console.log(`üèÉ [Flee Action] Moving away`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è flee-–¥–≤–∏–∂–µ–Ω–∏—è
  },

  Recover: (unit) => {
    console.log(`üåÄ [Recover Action] Regaining actions`);
    unit.actions = 1;
  },

  Explode: (unit) => {
    console.log(`üí£ [Explode Action] Kaboom!`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–∑—Ä—ã–≤–∞
  },

  Seize: (unit) => {
    console.log(`üèõÔ∏è [Seize Action] Attempting seize`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Seize
  },

  Corrupt: (unit) => {
    console.log(`‚ò£Ô∏è [Corrupt Action] Spreading corruption`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Corrupt
  },

  Invade: (unit) => {
    console.log(`üõ∏ [Invade Action] Drone deploy on city`);
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Invade
  }
};

function runActingAction(unit, target = null) {
  if (!unit.modules || unit.modules.length === 0) {
    handlePostActingPhase(unit);
    return;
  }

  for (const mod of unit.modules) {
    const action = ActingActions[mod];
    if (typeof action === 'function') {
      console.log(`‚öôÔ∏è [UNIT_ACTING] Executing: ${mod}`);
      action(unit, target);
      break;
    }
  }

  handlePostActingPhase(unit); // ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ACTING
}

export { runActingAction };
