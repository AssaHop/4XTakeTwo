// üìÇ core/combatLogic.js ‚Äî –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ actionFlags —é–Ω–∏—Ç–∞

import { renderUnits } from '../ui/render.js';
import { updateEndTurnButton } from '../ui/events.js';
import { state } from '../core/state.js';
import { handlePostAttackPhase } from './gameStateMachine.js';
import { hasModule } from './units.js';

function performAttack(attacker, target) {
  if (attacker.actions <= 0) return;

  target.hp -= 1;
  attacker.actions -= 1;

  console.log(`‚öîÔ∏è ${attacker.type} –∞—Ç–∞–∫—É–µ—Ç ${target.type} ‚Üí ${target.hp}/${target.maxHp}`);

  let lastAttackKilled = false;

  if (target.hp <= 0) {
    const idx = state.units.indexOf(target);
    if (idx >= 0) state.units.splice(idx, 1);
    console.log(`üíÄ ${target.type} –ø–æ–≥–∏–±`);
    lastAttackKilled = true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π –º–æ–¥—É–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Seize, Corrupt, Surge –∏ —Ç.–¥.)
  if (hasModule(attacker, 'Corrupt')) {
    console.log('‚ò£Ô∏è Corrupt: —Ü–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è');
    target.status = target.status || [];
    target.status.push('corroded');
  }

  if (hasModule(attacker, 'Surge')) {
    console.log('‚ùÑÔ∏è Surge: —Ü–µ–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞');
    target.status = target.status || [];
    target.status.push('frozen');
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —é–Ω–∏—Ç–∞ –ø—Ä–∏ –Ω—É–ª–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
  if (attacker.actions <= 0) {
    attacker.deselect?.();
    state.selectedUnit = null;
    state.highlightedHexes = [];
  }

  state.hasActedThisTurn = true;
  renderUnits(state.scale, state.offset);
  updateEndTurnButton(true);

  // FSM-–ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ (Percy, Flee)
  handlePostAttackPhase(attacker, lastAttackKilled);
}

function canAttack(attacker, target) {
  if (!attacker || !target) return false;
  if (attacker.actions <= 0) return false;
  if (attacker.owner === target.owner) return false;

  const dx = Math.abs(attacker.q - target.q);
  const dy = Math.abs(attacker.r - target.r);
  const dz = Math.abs(attacker.s - target.s);
  return dx <= attacker.attackRange && dy <= attacker.attackRange && dz <= attacker.attackRange;
}

export { performAttack, canAttack };
