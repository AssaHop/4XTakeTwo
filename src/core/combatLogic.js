// üìÇ core/combatLogic.js

import { renderUnits } from '../ui/render.js';
import { updateEndTurnButton } from '../ui/uiControls.js';
import { state } from '../core/state.js';
import { evaluatePostAction } from './gameStateMachine.js';
import { hasModule } from '../mechanics/units.js';

function performAttack(attacker, target) {
  if (!attacker?.canAct) {
    console.warn(`[ATTACK BLOCKED] ${attacker?.type} can't act`);
    return;
  }

  target.hp -= attacker.atDamage || 1;
  attacker.canAct = false;

  console.log(`‚öîÔ∏è ${attacker.type} –∞—Ç–∞–∫—É–µ—Ç ${target.type} ‚Üí ${target.hp}/${target.maxHp}`);

  let killed = false;

  if (target.hp <= 0) {
    const idx = state.units.indexOf(target);
    if (idx >= 0) state.units.splice(idx, 1);
    console.log(`üíÄ ${target.type} –ø–æ–≥–∏–±`);
    killed = true;
  }

  // ‚öôÔ∏è –ú–æ–¥—É–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  if (hasModule(attacker, 'Corrupt')) {
    console.log('‚ò£Ô∏è Corrupt: —Ü–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è');
    target.status = target.status || [];
    target.status.push('corroded');
  }

  if (hasModule(attacker, 'Surge')) {
    console.log('‚ùÑÔ∏è Surge: —Ü–µ–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∞');
    target.status = target.status || [];
    target.status.push('frozen');
  }

  // üîÅ Percy: –¥–æ–ø. –∞—Ç–∞–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–±–∏–ª
  if (killed && hasModule(attacker, 'Percy') && !attacker.actBonusUsed) {
    attacker.canAct = true;
    attacker.actBonusUsed = true;
    console.log('üîÅ [Percy Triggered] repeat attack granted');
  }

  // üèÉ Flee: –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ò–ó–ù–ê–ß–ê–õ–¨–ù–û –±—ã–ª–æ canAct=true
  if (!killed && hasModule(attacker, 'Flee') && !attacker.actBonusUsed) {
    attacker.canMove = true;
    attacker.actBonusUsed = true;
    console.log('üèÉ [Flee Triggered] move after attack allowed');
  } else {
    attacker.canMove = false; // default case ‚Äî –Ω–µ –¥–æ–ª–∂–µ–Ω –±–æ–ª—å—à–µ –¥–≤–∏–≥–∞—Ç—å—Å—è
  }

  evaluatePostAction(attacker, {
    type: 'attack',
    killed: killed
  });

  state.hasActedThisTurn = true;
  renderUnits(state.scale, state.offset);
  updateEndTurnButton(true);
}

function canAttack(attacker, target) {
  if (!attacker || !target) return false;
  if (!attacker.canAct) return false;
  if (attacker.owner === target.owner) return false;

  const dx = Math.abs(attacker.q - target.q);
  const dy = Math.abs(attacker.r - target.r);
  const dz = Math.abs(attacker.s - target.s);

  return (
    dx <= attacker.atRange &&
    dy <= attacker.atRange &&
    dz <= attacker.atRange
  );
}

export { performAttack, canAttack };
