// ‚úÖ gameStateMachine.js (–Ω–∞–¥–µ–∂–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ, –±–µ–∑ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ)

import { state } from './state.js';
import { updateEndTurnButton } from '../ui/uiControls.js';
import { highlightUnitContext, clearMoveHighlights, clearAttackHighlights, clearAllHighlights } from '../ui/highlightManager.js';

const GameState = {
  IDLE: 'IDLE',
  UNIT_SELECTED: 'UNIT_SELECTED',
  UNIT_MOVING: 'UNIT_MOVING',
  UNIT_ACTING: 'UNIT_ACTING',
  ENEMY_TURN: 'ENEMY_TURN',
  GAME_OVER: 'GAME_OVER'
};

let currentState = GameState.IDLE;

function getState() {
  return currentState;
}

function transitionTo(newState) {
  console.log(`üéØ GameState Transition: ${currentState} ‚ûù ${newState}`);
  currentState = newState;
}

function is(stateValue) {
  return currentState === stateValue;
}

function handlePostMovePhase(unit) {
  console.log(`[DEBUG] handlePostMovePhase ‚Äî Unit=${unit.type}, Actions=${unit.actions}, moveUsed=${unit.moveUsed}`);

  // üí° –ù–∞–¥–µ–∂–Ω–æ: –æ—á–∏—â–∞–µ–º move –ø–æ–¥—Å–≤–µ—Ç–∫—É, –Ω–æ –ø–µ—Ä–µ—Ä–∏—Å—É–µ–º –≤—Å—ë —á–µ—Ä–µ–∑ highlightUnitContext –Ω–∏–∂–µ
  clearMoveHighlights();
  clearAttackHighlights();

  if (unit.actions > 0) {
    transitionTo(GameState.UNIT_SELECTED);
    highlightUnitContext(unit); // ‚úÖ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞, –µ—Å–ª–∏ —é–Ω–∏—Ç –µ—â—ë –∞–∫—Ç–∏–≤–µ–Ω
    return;
  }

  unit.actions = 0;
  state.hasActedThisTurn = true;
  updateEndTurnButton();
  transitionTo(GameState.IDLE);
  clearAllHighlights();
}

function handlePostActingPhase(unit) {
  // ‚ö° –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Flee ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ acting
  if (unit.canMoveAfterAttack && !unit.moveUsed) {
    console.log(`üí® [Flee Module] Move allowed after acting`);
    unit.actions = 1;
    highlightUnitContext(unit); // ‚úÖ –∑–¥–µ—Å—å —Ç–æ–∂–µ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    transitionTo(GameState.UNIT_SELECTED);
    return;
  }

  unit.actions = 0;
  unit.chargeBonusGiven = false;
  state.hasActedThisTurn = true;
  updateEndTurnButton();
  transitionTo(GameState.IDLE);
  clearAllHighlights();
}

export {
  GameState,
  getState,
  transitionTo,
  is,
  handlePostMovePhase,
  handlePostActingPhase
};
