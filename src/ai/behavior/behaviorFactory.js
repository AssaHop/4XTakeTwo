import { FSMStates } from '../fsm/strategyManager.js';

// ATTACK
import { createAttackTree } from './trees/attack/attackTree.js';
import { createAttackWbbTree } from './trees/attack/attackWbb.js';

// DEFEND
import { createDefendTree } from './trees/defend/defendTree.js';
import { createDefendWbbTree } from './trees/defend/defendWbb.js';

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–∏–ø–∞ —é–Ω–∏—Ç–∞.
 */
export function getBehaviorTreeForUnit(unit, gameState, fsmState) {
  switch (fsmState) {
    case FSMStates.ATTACK:
      switch (unit.type) {
        case 'WBB':
          console.log(`üéØ [BT] WBB uses ATTACK ‚Üí attackWbb.js`);
          return createAttackWbbTree(unit, gameState);
        default:
          console.log(`üîÅ [BT] ${unit.type} uses shared ATTACK ‚Üí attackTree.js`);
          return createAttackTree(unit, gameState);
      }

    case FSMStates.DEFEND:
      switch (unit.type) {
        case 'WBB':
          console.log(`üéØ [BT] WBB uses DEFEND ‚Üí defendWbb.js`);
          return createDefendWbbTree(unit, gameState);
        default:
          console.log(`üîÅ [BT] ${unit.type} uses shared DEFEND ‚Üí defendTree.js`);
          return createDefendTree(unit, gameState);
      }

    default:
      console.warn(`‚ö†Ô∏è [BT] Unknown FSM state (${fsmState}), fallback to shared ATTACK`);
      return createAttackTree(unit, gameState);
  }
}
