/**
 * –§—É–Ω–∫—Ü–∏—è –∞—Ç–∞–∫–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ.
 */
export function attackEnemyInRange(unit, gameState) {
  const enemies = gameState.getVisibleEnemies(unit);
  const target = enemies
    .filter(enemy => unit.canAttack(enemy))
    .sort((a, b) => unit.distanceTo(a) - unit.distanceTo(b))[0];

  if (!target) {
    console.log('‚ö†Ô∏è No enemy in range to attack');
    return false;
  }

  console.log(`‚öîÔ∏è [AI] ${unit.type} –∞—Ç–∞–∫—É–µ—Ç ${target.type}`);
  target.hp -= unit.atDamage || 1;
  unit.canAct = false;

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —É–±–∏–π—Å—Ç–≤–∞
  if (target.hp <= 0) {
    const index = gameState.units.indexOf(target);
    if (index !== -1) gameState.units.splice(index, 1);
    console.log(`üíÄ ${target.type} —É–Ω–∏—á—Ç–æ–∂–µ–Ω AI`);
  }

  return true;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å.
 */
export function getClosestAttackableEnemy(unit, gameState) {
  const enemies = unit.getVisibleEnemies();
  return enemies
    .filter(enemy => unit.canAttack(enemy))
    .sort((a, b) => unit.distanceTo(a) - unit.distanceTo(b))[0];
}