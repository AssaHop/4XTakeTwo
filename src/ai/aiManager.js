// üìÅ src/ai/aiManager.js
import { AttackActions } from './actions/attackActions.js';
import { MoveActions } from './actions/moveActions.js';
import { EconomicActions } from './actions/economicActions.js';

// üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è AI-—é–Ω–∏—Ç–æ–≤
function getAIUnits(units) {
    return units.filter(u => u.owner?.startsWith('enemy'));
}

/**
 * üì¶ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö–æ–¥–∞ AI
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π FSM –∏ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ü–µ–Ω–∫–∏
 */
export async function runAIForTurn(gameState) {
    const aiUnits = getAIUnits(gameState.units);
    console.log('üß≥ AI Units found:', aiUnits.length);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
    const attackManager = new AttackActions(gameState);
    const moveManager = new MoveActions(gameState);
    const economyManager = new EconomicActions(gameState);

    for (const unit of aiUnits) {
        console.log(`üîç ${unit.type} at (${unit.q},${unit.r},${unit.s}) | owner=${unit.owner} | HP=${unit.hp}/${unit.maxHp} | act=${unit.canAct}, move=${unit.canMove}`);

        // –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const fsm = unit.fsm || 'ATTACK';
        console.log('üß† FSM Strategy:', fsm);

        try {
            switch (fsm) {
                case 'ATTACK':
                    await attackManager.executeAttackStrategy(unit);
                    break;
                case 'MOVE':
                    await moveManager.executeMoveStrategy(unit);
                    break;
                case 'ECONOMY':
                    await economyManager.executeEconomicStrategy(unit);
                    break;
                default:
                    console.warn(`üö® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è FSM: ${fsm}`);
            }
        } catch (error) {
            console.error(`üî• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è ${unit.type}:`, error);
        }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this.evaluateAndAdaptGlobalStrategy(gameState);
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ AI
 */
function evaluateAndAdaptGlobalStrategy(gameState) {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É
    // - –ê–Ω–∞–ª–∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
    // - –û—Ü–µ–Ω–∫–∞ —É–≥—Ä–æ–∑
    // - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    console.log('üåê –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞');
}

export default {
    runAIForTurn,
    evaluateAndAdaptGlobalStrategy
};