// üìÅ src/ai/aiUtils.js

import { findPath } from '../mechanics/pathfinding.js';
import { hexDistance } from '../mechanics/hexUtils.js';
import { Unit } from '../mechanics/units.js';

// üîç –ü–æ–∏—Å–∫ –ø—É—Ç–∏ –æ—Ç —é–Ω–∏—Ç–∞ –¥–æ —Ü–µ–ª–∏
function getPathToTarget(unit, target, mapIndex) {
  if (!unit || !target) return [];
  return findPath(unit, target, mapIndex, unit); // –ø–µ—Ä–µ–¥–∞—ë–º mapIndex –Ω–∞–ø—Ä—è–º—É—é
}


// üéØ –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π —Ü–µ–ª–∏
function findNearestEnemy(unit, units) {
  const enemies = units.filter(u => u.owner !== unit.owner);
  if (enemies.length === 0) return null;

  let nearest = null;
  let minDist = Infinity;

  for (const enemy of enemies) {
    const dist = hexDistance(unit, enemy);
    if (dist < minDist) {
      nearest = enemy;
      minDist = dist;
    }
  }

  return nearest;
}

// üìç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö —é–Ω–∏—Ç–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏
function getEnemyUnitsInRange(unit, units) {
  if (!unit || !unit.atRange) return [];

  const attackHexes = Unit.getAttackableHexes(unit);

  return units.filter(target => {
    return target.owner !== unit.owner &&
           attackHexes.some(hex => hex.q === target.q && hex.r === target.r && hex.s === target.s);
  });
}

// üö∂ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ‚Äî –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ü–µ–ª–µ–π –Ω–µ—Ç
function fallbackMove(unit, mapIndex) {
  if (!mapIndex) return null;

  const directions = [
    { dq: 1, dr: -1, ds: 0 }, { dq: 1, dr: 0, ds: -1 }, { dq: 0, dr: 1, ds: -1 },
    { dq: -1, dr: 1, ds: 0 }, { dq: -1, dr: 0, ds: 1 }, { dq: 0, dr: -1, ds: 1 },
  ];

  for (const dir of directions) {
    const q = unit.q + dir.dq;
    const r = unit.r + dir.dr;
    const s = unit.s + dir.ds;
    const key = `${q},${r},${s}`;
    const tile = mapIndex[key];
    if (tile && tile.terrainType === 'land') {
      return { q, r, s };
    }
  }

  return null;
}

export {
  getPathToTarget,
  findNearestEnemy,
  getEnemyUnitsInRange,
  fallbackMove,
};
